package repository

import (
	"os"
	"path/filepath"

	gen "github.com/v0xpopuli/gorepogen/internal/generator"
	rc "github.com/v0xpopuli/gorepogen/internal/repocomp"

	j "github.com/dave/jennifer/jen"
)

type generator struct {
	outputDir     string
	namesRegistry gen.NamesRegister
	components    []rc.Appender
}

// NewGenerator make new instance of generator
func NewGenerator(outputDir string, namesRegistry gen.NamesRegister) *generator {
	return &generator{
		outputDir:     outputDir,
		namesRegistry: namesRegistry,
		components: []rc.Appender{
			rc.NewInterface(namesRegistry.GetInterfaceNames()),
			rc.NewStruct(namesRegistry.GetStructNames()),
			rc.NewConstructor(namesRegistry.GetConstructorNames()),
			rc.NewMethodsList(namesRegistry.GetMethodListNames()),
		},
	}
}

// Generate perform final rendering from all components
func (g generator) Generate() (string, error) {

	file := g.newRepository()
	for _, c := range g.components {
		c.AppendTo(file)
	}

	repositoryFullPath := g.makeRepositoryDir()
	return repositoryFullPath, file.Save(repositoryFullPath)
}

func (g generator) newRepository() *j.File {
	file := j.NewFile(g.namesRegistry.RepositoryPackageName)
	file.HeaderComment("THIS FILE IS AUTOGENERATED.\nFEEL FREE TO CHANGE IT.\nGOREPOGEN 1.0.0")
	file.ImportNames(
		map[string]string{
			"github.com/jinzhu/gorm":        "gorm",
			g.namesRegistry.FullPackageName: g.namesRegistry.PackageName,
		},
	)
	return file
}

func (g generator) makeRepositoryDir() string {
	repositoryDir := filepath.Join(g.outputDir, g.namesRegistry.RepositoryPackageName)
	_ = os.MkdirAll(repositoryDir, os.ModePerm)
	return filepath.Join(repositoryDir, g.namesRegistry.FileName)
}
