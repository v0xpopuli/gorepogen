package generator

import (
	"fmt"
	"os"
	"path/filepath"
	"strings"

	rc "github.com/v0xpopuli/gorepogen/internal/repocomp"

	j "github.com/dave/jennifer/jen"
)

// CreateNamesRegistry build full list of needed names
// needed for auto generation
func CreateNamesRegistry(entityInfo *entityInfo) NamesRegistry {
	entityNameUncapitalized := strings.ToLower(entityInfo.Name)
	entityName := entityInfo.Name
	return NamesRegistry{
		EntityName:            entityName,
		PackageName:           entityInfo.Package,
		FullPackageName:       entityInfo.FullPackagePath,
		EntityNameWithPackage: fmt.Sprintf("%s.%s", entityInfo.Package, entityName),
		InterfaceName:         fmt.Sprintf("%sRepository", entityName),
		ConstructorName:       fmt.Sprintf("New%sRepository", entityName),
		StructName:            fmt.Sprintf("%sRepository", entityNameUncapitalized),
		ReceiveName:           fmt.Sprintf("r %sRepository", entityNameUncapitalized),
		FileName:              fmt.Sprintf("%s_repository.go", entityNameUncapitalized),
		RepositoryPackageName: "repository",
	}
}

type Generator struct {
	namesRegistry NamesRegistry
	components    []rc.Appender
}

func NewGenerator(namesRegistry NamesRegistry) *Generator {
	return &Generator{
		namesRegistry: namesRegistry,
		components: []rc.Appender{
			rc.NewInterface(namesRegistry.GetInterfaceNames()),
			rc.NewStruct(namesRegistry.GetStructNames()),
			rc.NewConstructor(namesRegistry.GetConstructorNames()),
			rc.NewMethodsList(namesRegistry.GetMethodListNames()),
		},
	}
}

// Generate perform final rendering from all components
func (g Generator) Generate(currentDir string) (string, error) {

	repositoryPackageName := g.namesRegistry.RepositoryPackageName
	file := g.newRepository(repositoryPackageName, g.namesRegistry)

	for _, c := range g.components {
		c.AppendTo(file)
	}

	repositoryFullPath := g.makeRepositoryDir(g.namesRegistry.FileName, currentDir, repositoryPackageName)
	return repositoryFullPath, file.Save(repositoryFullPath)
}

func (g Generator) newRepository(repositoryPackageName string, namesRegistry NamesRegistry) *j.File {
	file := j.NewFile(repositoryPackageName)
	file.HeaderComment("THIS FILE IS AUTOGENERATED.\nFEEL FREE TO CHANGE IT.\nGOREPOGEN 1.0.0")
	file.ImportNames(
		map[string]string{
			"github.com/jinzhu/gorm":      "gorm",
			namesRegistry.FullPackageName: namesRegistry.PackageName,
		},
	)
	return file
}

func (g Generator) makeRepositoryDir(fileName, currentDir, repositoryPackageName string) string {
	repositoryDir := filepath.Join(currentDir, repositoryPackageName)
	_ = os.MkdirAll(repositoryDir, os.ModePerm)
	return filepath.Join(repositoryDir, fileName)
}
