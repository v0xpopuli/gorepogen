package generator

import (
	"os"
	"path/filepath"

	rc "github.com/v0xpopuli/gorepogen/internal/component"
	"github.com/v0xpopuli/gorepogen/internal/param"

	j "github.com/dave/jennifer/jen"
)

type generator struct {
	outputDir  string
	params     *param.GeneratorParams
	components []rc.Appender
}

func New(outputDir string, params *param.GeneratorParams, components []rc.Appender) *generator {
	return &generator{
		outputDir:  outputDir,
		params:     params,
		components: components,
	}
}

// Generate perform final rendering from all components
func (g generator) Generate() (string, error) {

	file := g.newRepository()
	for _, c := range g.components {
		c.AppendTo(file)
	}

	repositoryFullPath := g.makeRepositoryDir()
	return repositoryFullPath, file.Save(repositoryFullPath)
}

func (g generator) newRepository() *j.File {
	file := j.NewFile(g.params.RepositoryPackageName)
	file.HeaderComment(g.getHeaderComment())
	file.ImportNames(g.getImportNames())
	return file
}

func (g generator) getHeaderComment() string {
	return "THIS FILE IS AUTOGENERATED.\nFEEL FREE TO CHANGE IT.\nGOREPOGEN 1.0.0"
}

func (g generator) getImportNames() map[string]string {
	return map[string]string{
		"github.com/jinzhu/gorm": "gorm",
		g.params.FullPackageName: g.params.PackageName,
	}
}

func (g generator) makeRepositoryDir() string {
	if g.outputDir != "" {
		filepath.Join(g.outputDir, g.params.FileName)
	}
	pwd, _ := os.Getwd()
	pwd = filepath.Join(pwd, g.params.RepositoryPackageName)
	_ = os.MkdirAll(pwd, os.ModePerm)
	return filepath.Join(pwd, g.params.FileName)
}
